#+TITLE: H2L

OCR for handwritten math expression.

* Introduction
These scripts are build for recognizing handwritten mathematical equations using neural networks. For now, we use convolutional net combined with other traditional techniques to do the trick. For now, only characters recognizer and segmenter are included here. Nothing is working actually.

* General structure
Everything begins at the function =heuristicGenerate= in *evaluate.py*.
** Steps for generating PDF file:
1. Extract the document paper using =extractDocument=.
2. Gray scale.
3. Binarize.
4. Segment all the lines using =LineSegment=
5. Segment all the characters in lines using =segmentCharacters=.
   1) Segment characters in a line using =heuristicSegmenter.segmenter=.
   2) Check whether a character is a super script or subscript.
   3) Predict the characters from above segmented character images using =characterRecognizer.recognizer=
   4) Return the resulting equation from the line image.
6. Translate the equation strings into LaTeX file and call /pdflatex/ to compile.

** Training the neural networks:
There are some neural nets in the code, but we only use one of them to do the recognition due to performance issue. I have tried to use similar techniques to do the segmentation, sadly the resulting performance is a disaster. So all the segmentation are implemented with heuristic techniques.

Codes for training neural networks are in *trainer* directory, trained models are in *models* directory, configuration for loading data and learning parameters are in *configuration* directory, you can use *train.py* to kick the training processes start, just specify the model you wanna train and comment out the others.

** Used model
For now, we only use the convolutional net for character recognition.

** Misc
Codes are glued together, and since the project is still in experiment phase, there are lots of deprecated but not removed code in this repository. These code will be cleaned in the future.

* What to do
There is a huge problem when trying to recognize those characters. Although many papers were published to address the image recognition problem, but the performance described in papers and in real life are different. So, here the main task is to tackle the performance issue.

* TODO To-do list for fis: [1/8]
 + [ ] Add empty column to segmentation point
 + [X] Clean segmentation points based on probability
 + [ ] Construct all features
 + [ ] A better document extractor.
 + [ ] Better character recognizer
 + [ ] Characters segmentation check for o shape
 + [ ] Enhancement for math
 + [ ] Character data preprocess using feature map
 + [ ] Combine


#  LocalWords:  Binarize py LaTeX pdflatex convolutional H2L
